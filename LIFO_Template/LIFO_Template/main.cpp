#include <iostream>
#include <ctime>

using namespace std;

    //Класс Список
template <class T>
class List {

        //Структура с инфополями и адресным полем
    struct element {
        T x; //Инфополе. значения из x будут передаваться в список
        element *Next; //Адресное поле
    };

    element *Head; //Указатель на последний активный элемент или просто голова списка

public:
        //Конструктор и инициализация указателя пустым значением
    List() {
        Head = NULL;
    }

    ~List() {
        while ( Head != NULL) {  //Пока по адресу не пусто
            element *temp = Head->Next; //Временная переменная для хранения адреса следующего элемента

            delete Head; //Освобождаем адрес обозначающий начало

            Head = temp; //Меняем адрес на следующий
        }
    }

        //Функция добавления элементов в список
    void Add(T x) {
        element *temp = new element; //При каждом вызове выделяется память

        temp->x = x; //Записываем x в элемент структуры  element (в x структуры element)

        temp->Next = Head; //Указываем, что след. элемент это объект по адресу Head

        Head = temp; //Указываем, что последний активный элемент это только что введенный
    }

        //Функция отображения списка на экране
    void Show() {
        element *temp = Head; //Определяем указатель, который изначально он равен адресу начала списка

        while (temp != NULL) { //До тех пор пока не встретит пустое значение
            cout << temp->x <<" "; //Выведет элемент x из списка
            temp = temp->Next; //Указываем, что далее нам нужен следующий элемент
        }
    }
};

int main() {
    srand((unsigned int)time(0));

    int N; //Число элементов в список
    List <int> lst; //Переменная, тип которой список

    cout << "N = ";
    cin  >> N; //Указали сколько элементов вводить в список

    for (int i = 0; i < N; ++i) {
        lst.Add(rand() % 100); //Добавление элемента в список
    }

    lst.Show(); //Вывод списка на экран

    return 0;
}